void main_texture_color_balance_vp(
        // Vertex Inputs
        float4 position        : POSITION,    // Vertex position in model space
        float2 texCoord0    : TEXCOORD0,    // Texture UV set 0
 
        // Outputs
        out float4 oPosition    : POSITION,    // Transformed vertex position
        out float2 uv0        : TEXCOORD0,    // UV0
 
        // Model Level Inputs
        uniform float4x4 worldViewProj)
{
    // Calculate output position
    oPosition = mul(worldViewProj, position);
 
    // Simply copy the input vertex UV to the output
    uv0 = texCoord0;
}

void main_texture_color_balance_ps(
            float2 diffuse: TEXCOORD0,
 
            out float4 color    : COLOR,
 
            uniform float3 meanInput,
			uniform float3 meanTarget,
			uniform float3 varianceInput,
			uniform float3 varianceTarget,
            uniform sampler2D texture)
{
	diff = varianceTarget / varianceInput;
    color.rgb = tex2D(texture, diffuse).rgb - meanInput;        
    color.rgb = color.rgb + vec3(1.0, 0.0, 0.0);
	color.rgb = vec3(1.0, 0.0, 0.0);
    color.a = 1.0;
}